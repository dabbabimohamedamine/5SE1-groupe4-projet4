pipeline {
    agent any

    environment {
        SONARQUBE_URL = 'http://192.168.17.128:9000'
        SONARQUBE_TOKEN = credentials('new-sonar-token')
        SONARQUBE_PROJECT_KEY = 'tn.esprit.amin.devops_project'
    }

    stages {

        stage('Start SonarQube and Nexus') {
    steps {
        script {
            // Check if each container is running and start only if needed
            def sonarRunning = sh(script: 'docker ps -q -f name=sonarqube', returnStatus: true) == 0
            def nexusRunning = sh(script: 'docker ps -q -f name=nexus', returnStatus: true) == 0

            if (!sonarRunning || !nexusRunning) {
                echo 'Starting SonarQube and Nexus containers...'
                sh 'docker-compose -f ./docker-compose-ci.yml up -d --no-recreate'
            } else {
                echo 'SonarQube and Nexus containers are already running, skipping startup...'
            }
        }
    }
}

        stage('Checkout GIT') {
            steps {
                cleanWs()
                echo 'Pulling source code from GitHub...'
                checkout([$class: 'GitSCM', branches: [[name: 'amine-dabbabi']],
                    doGenerateSubmoduleConfigurations: false, extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: '1dd4e651-22db-44e2-8285-a907f0267d5b',
                        url: 'https://github.com/dabbabimohamedamine/devops-back.git'
                    ]]
                ])
            }
        }

        stage('Run Unit Tests') {
            steps {
                echo 'Running Unit Tests...'
                sh 'mvn test'
            }
        }

        


        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube analysis...'
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn sonar:sonar ' +
                        '-Dsonar.projectKey=${SONARQUBE_PROJECT_KEY} ' +
                        '-Dsonar.host.url=${SONARQUBE_URL} ' +
                        '-Dsonar.login=${SONARQUBE_TOKEN}'
                }
            }
        }

        stage('Build and Package') {
            steps {
                echo 'Running Maven clean and package...'
                sh 'mvn clean package'
            }
        }
    }

    post {
        success {
            echo 'CI pipeline completed successfully! Artifacts and reports are archived.'
            archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: true
            junit 'target/surefire-reports/*.xml'
            build job: 'cd-pipeline', wait: false // Trigger the CD pipeline
        }
        failure {
            echo 'CI pipeline failed.'
        }
    }
}
